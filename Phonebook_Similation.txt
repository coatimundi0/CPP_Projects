/*
Name: Garo Martinez
Lab: #08
Section: 02
Date Started: 3-7-2019
Description: A program which uses an array of structures to creates a "phonebook" full of contact information.
			 User is able to create as many contacts as they want. Don't display NULL entries.
			 Allocate and free memory. Additionally, it must be able to sort the names alphabetically, 
			 find the phone number from the contact name, select a random contact, and remove all contacts.
			 Now the user can save the file! Wow.*/
			 
#include<stdio.h>
#include<stdlib.h>

//this is the contact structure
struct Phonebook{ 
		char FirstName[50];
		char LastName[50];
		char PhoneNumber[50];} ;

//variables:
int numofcontacts;
int num;
int count=0; // to keep count of how many contacts you have!!
int arrayofcontacts;
char FileName[100];

FILE *pRead; 
FILE *pWrite; 

	
//prototype. use the struct name "struct Phonebook". needs "struct" every time
void AddContact(struct Phonebook *book, int count);
void RemoveContact(struct Phonebook *book, int count);
void ShowAll(struct Phonebook *book, int count);
void FindNumber(struct Phonebook *book, int count);
void RandomContact(struct Phonebook *book, int count);
void RemoveAll(struct Phonebook *book, int count);
void Alphabetize(struct Phonebook *book, int count);
void SaveFile(struct Phonebook *book, int count);
void OpenFile(struct Phonebook *book, int count);


int main()
{	
//Phonebook phone;
struct Phonebook *book; //must include "struct" AND you have to do it at every instance of using Phonebook
		book = (struct Phonebook *) malloc(sizeof(struct Phonebook));

int temp = 0;
int MenuChoice;

printf("\t\t\t\t.:PHONE BOOK APPLICATION:.\n\n\n");
		
do{
printf("\n\t\t1: ADD NEW FRIEND\n");
printf("\t\t2: DELETE FRIEND\n");
printf("\t\t3: FIND FRIEND\n");
printf("\t\t4: RANDOM FRIEND\n");
printf("\t\t5: SHOW PHONE BOOK\n");
printf("\t\t6: ALPHABETIZE ALL\n");
printf("\t\t7: DELETE ALL\n");
printf("\t\t8: SAVE FILE\n");
printf("\t\t9: RETRIEVE FILE\n");
printf("\t\t0: EXIT APP\n\n");


		printf("\t\t\tWhat would you like to do?: ");
		scanf("%d", &MenuChoice);

	switch(MenuChoice) {
	case 1:
			AddContact(book, count); 		//need to ACTUALLY use variable name (no asterisk)
			count++; 			//increment anytime you add contact
			printf("\nFriend was added to phonebook.\tContacts = %d\n\n",count);
			break;
	case 2:
			RemoveContact(book, count);
			count--; 		//decrement for anytime you remove contact
			printf("\nFriend was removed from phonebook.\n\n");
			printf("\tNumber of Contacts = %d",count);
			break;
	case 3: 
			FindNumber(book, count);
			break;
	case 4:
			RandomContact(book, count);
			break;
	case 5:
			printf("\n\n\tNumber of Contacts = %d",count);
			ShowAll(book, count);
						//no need to in/decrement "count" b/c nothing is changed
			break;
	case 6:
			printf("\n\n\tNumber of Contacts = %d",count);
			Alphabetize(book, count);
			printf("\nNames sorted.\n\n");
			break;
	case 7:
			RemoveAll(book, count);
			count=0;
			printf("\nAll friends removed from phonebook.\n");
			printf("\tNumber of Contacts = %d\n\n",count);
			break;
	case 8:
			SaveFile(book, count);
			break;
	case 9: 
			OpenFile(book, count);
			break;
	case 0: 
			printf("\nThanks for checking out your phonebook!");
			break;
	default:
			printf("\nThat's an invalid menu option, sorry.\nTry again?\n");
			break;
	 }} while (MenuChoice != 0); 
		return 0;
			}
 		

//funtion definitions

void AddContact(struct Phonebook *book, int count) {
	 
   pWrite = fopen("phonebook.txt", "a");
   if ( pWrite == NULL )
   {
      printf("ERROR!");
   }
    else {	
	int temp;
	printf("\nFirst: ");
	scanf("%s", book[count].FirstName); //
	printf("Last: ");
	scanf("%s", book[count].LastName);
	printf("Number: ");
	scanf("%s", book[count].PhoneNumber);

    fclose(pWrite);  }
												}

void RemoveContact(struct Phonebook *book, int count) {
	int i, j;
	char First[50];
	char Last[50];
	printf("\n\nPlease keep in mind that you must use the same capitalization patterns as inputted initially for this program to work properly.\n");
	printf("First: ");
	scanf("%s", &First);
	printf("Last: ");
	scanf("%s", &Last);
		for (i=0; i<count; i++) { //iterate through phonebook contacts
			if((strcmp(book[i].FirstName, First) == 0) && (strcmp(book[i].LastName, Last) == 0)) { //compare each contact to what was input
				printf("Match Found.");
				for (j=i; j<count; j++) { //instead of iterating same variable, make new, equal one.
					book[j] = book[j+1]; }
		} } }

void FindNumber (struct Phonebook *book, int count){
	int i;
	char First[50];
	char Last[50];
	printf("\n\nPlease keep in mind that you must use the same capitalization patterns as inputted initially for this program to work properly.\n");
	printf("First: ");
	scanf("%s", &First);
	printf("Last: ");
	scanf("%s", &Last);
		for (i=0; i<count; i++) {
			if(strcmp(First, book[i].FirstName) == 0) {
				if(strcmp(Last, book[i].LastName) == 0) {
				printf("This friend's phone number is %s.\n\n", book[i].PhoneNumber);
				break; }
				else {
				printf("This friend has not been added yet.");
				break;
				} } } } 

void ShowAll(struct Phonebook *book, int count) {
	pRead = fopen("phonebook.txt", "r");
   if ( pRead == NULL)
   {
      printf("ERROR!");
   }
   else
   {
	if (count==0){
	printf("\n\nYou have NO contacts. Try adding some friends.\n\n\n");
	 }
	else {
	int i;
	printf("\n\nContacts:\n");
	for (i=0; i<count; i++)
		printf("%s %s - %s \n", book[i].FirstName, book[i].LastName, book[i].PhoneNumber);
	}
	fclose(pRead);
} }

void RandomContact(struct Phonebook *book, int count) {
	int random = 0;
	srand(time(NULL));
	random = rand() % count; 
printf("\nRandom Friend: %s %s\n", book[random].FirstName, book[random].LastName);
printf("Their Number: %s\n", book[random].PhoneNumber);
} 

void RemoveAll(struct Phonebook *book, int count) {
	int i;
	char empty[50]={'\0'};
	for (i=0; i<count; i++) {
		strcpy(book[i].FirstName, empty); 			//empty --> first name
    	strcpy(book[i].LastName, empty); 
    	strcpy(book[i].PhoneNumber, empty); 
			}
		}
		
void Alphabetize(struct Phonebook *book, int count) {
	int i=0, min_index, j;
	char tmp[50];
	
		pRead = fopen("phonebook.txt", "r");
   if ( pRead == NULL)
   {
      printf("ERROR!");
   }
   else
   {
	if (count==0){
	printf("\n\nYou have NO contacts. Try adding some friends.\n\n\n");
	 }
	else {
	for (i=0; i<count; i++) //loop through the number of contacts 
	{
		min_index = i; //every loop, min = i
		
		for (j=i+1; j<count; j++) { //j is the one after i every time
			
			if((strcmp(book[min_index].FirstName, book[j].FirstName) > 0)) //compare i to i+1
			{
				min_index = j; //change condition. if > 0 then it indicates j is alphabetically lower than i.
			}
			if (min_index!=i) { //if change condition is true, this switches information
				//*******first*******
				strcpy(tmp, book[i].FirstName);													//move current i to temporary slot
				strcpy(book[i].FirstName, book[min_index].FirstName);							//move j to i (originally a higher letter)
				strcpy(book[min_index].FirstName, tmp);											//move temp to where j was
				//*******last********
				strcpy(tmp, book[i].LastName);
				strcpy(book[i].LastName, book[min_index].LastName);
				strcpy(book[min_index].LastName, tmp);
				//*******number******
				strcpy(tmp, book[i].PhoneNumber);
				strcpy(book[i].PhoneNumber, book[min_index].PhoneNumber);
				strcpy(book[min_index].PhoneNumber, tmp);
										   } } }
		printf("\n\nSorted Contacts:\n\n");
			for (i=0; i<count; i++)
		printf("%s %s - %s\n", book[i].FirstName, book[i].LastName, book[i].PhoneNumber);
			} 
		fclose(pRead);	} }						
		
void SaveFile(struct Phonebook *book, int count) {
	int Choose, iterator;
	
     printf("\n\nWould you prefer to name your own file?\n");
     printf("1 for YES\n2 for NO (sticking to the default name)");
     printf("\nChoice: ");
     scanf("%d", &Choose);
                              
     if (Choose == 2)
     {
     	pWrite = fopen("phonebook.txt", "w");     //opens default
     }
     else
     {
         printf("File Name: ");
         scanf("%s", FileName);
         pWrite = fopen("FileName", "w");		//opens new file (under that name)
     }
                              
     if (pWrite == NULL)
     {
    	 printf("\nCANNOT OPEN!\n");
     }
     else {
         for (iterator = 0; iterator < count; iterator++)
         {
                fprintf(pWrite, "%s %s - %s\n", book[iterator].FirstName, book[iterator].LastName, book[iterator].PhoneNumber);
         }
                fclose(pWrite); 
	printf("\n\nYou have successfully saved your contacts to the file!");	 
		 }
		   										} 
		   										
void OpenFile(struct Phonebook *book, int count){
	int iterator;
       
     printf("\nEnter the file name you wish to open: ");
     scanf("%s", FileName);
  
     pRead = fopen("FileName", "r");
  
     if (pRead == NULL)
     {
     printf("\nCANNOT OPEN FILE!n");
     }
     else
     {
         for (iterator = 0; iterator < count; iterator++)
         {
                fscanf(pWrite, "%s %s - %s\n", book[iterator].FirstName, book[iterator].LastName, book[iterator].PhoneNumber);
                printf("\n%s %s - %s", book[iterator].FirstName, book[iterator].LastName, book[iterator].PhoneNumber);
                  
         }
     }
}